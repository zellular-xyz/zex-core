syntax = "proto3";

message ZexState {
    map<string, Market> markets = 1;
    map<string, Balance> balances = 2;
    repeated AmountEntry amounts = 3;
    repeated TradeEntry trades = 4;
    repeated OrderEntry orders = 5;
    map<string, Withdraws> withdraws = 6;
    map<string, WithdrawNonces> withdraw_nonces = 7;
    map<string, uint64> deposited_blocks = 8;
    repeated NonceEntry nonces = 9;
    repeated PairLookupEntry pair_lookup = 10;
    uint64 last_tx_index = 11;
    repeated DepositEntry deposits = 12;
    repeated IDLookupEntry public_to_id_lookup = 13;
    map<uint64, bytes> id_to_public_lookup = 14;
    repeated ContractToIDOnChainEntry contract_to_token_id_on_chain_lookup = 15;
    repeated IDToContractOnChainEntry token_id_to_contract_on_chain_lookup = 16;
    repeated TokenToDecimalOnChainEntry token_decimal_on_chain_lookup = 17;
    map<string, uint64> last_token_id_on_chain = 18;
}

message Market {
    string base_token = 1;
    string quote_token = 2;
    repeated Order buy_orders = 3;
    repeated Order sell_orders = 4;
    repeated OrderBookEntry bids_order_book = 5;
    repeated OrderBookEntry asks_order_book = 6;
    uint64 first_id = 7;
    uint64 final_id = 8;
    uint64 last_update_id = 9;
    bytes kline = 10; // Serialized pandas DataFrame
}

message Order {
    double price = 1;
    int64 index = 2;
    bytes tx = 3;
}

message OrderBookEntry {
    double price = 1;
    double amount = 2;
}

message Balance {
    repeated BalanceEntry balances = 1;
}

message BalanceEntry {
    bytes public_key = 1;
    double amount = 2;
}

message AmountEntry {
    bytes tx = 1;
    double amount = 2;
}

message TradeEntry {
    bytes public_key = 1;
    repeated Trade trades = 2;
}

message Trade {
    uint32 t = 1;
    double amount = 2;
    string pair = 3;
    uint32 order_type = 4;
    bytes order = 5;
}

message OrderEntry {
    bytes public_key = 1;
    repeated bytes orders = 2;
}

message WithdrawEntry {
    bytes public_key = 1;
    repeated bytes raw_txs = 2;
}

message Withdraws {
    repeated WithdrawEntry withdraws = 1;
}

message WithdrawNonceEntry {
    bytes public_key = 1;
    uint64 nonce = 2;
}

message WithdrawNonces {
    repeated WithdrawNonceEntry nonces = 1;
}

message DepositEntry {
    bytes public_key = 1;
    repeated Deposit deposits = 2;
}

message Deposit {
    string token = 1;
    double amount = 2;
    uint64 time = 3;
}

message NonceEntry {
    bytes public_key = 1;
    uint32 nonce = 2;
}

message PairLookupEntry {
    bytes key = 1;
    string base_token = 2;
    string quote_token = 3;
    string pair = 4;
}

message IDLookupEntry {
    bytes public_key = 1;
    uint64 user_id = 2;
}

message ContractToIDOnChainEntry {
    string chain = 1;
    map<string, uint64> contract_to_id = 2;
}

message IDToContractOnChainEntry {
    string chain = 1;
    map<uint64, string> id_to_contract = 2;
}

message TokenToDecimalOnChainEntry {
    string chain = 1;
    map<string, uint64> contract_to_decimal = 2;
}
